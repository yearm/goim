// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ws_conn.proto

package pb_ws_conn

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeliverMessageReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeliverMessageReq) Reset()         { *m = DeliverMessageReq{} }
func (m *DeliverMessageReq) String() string { return proto.CompactTextString(m) }
func (*DeliverMessageReq) ProtoMessage()    {}
func (*DeliverMessageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a9acacddce0399c, []int{0}
}

func (m *DeliverMessageReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeliverMessageReq.Unmarshal(m, b)
}
func (m *DeliverMessageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeliverMessageReq.Marshal(b, m, deterministic)
}
func (m *DeliverMessageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliverMessageReq.Merge(m, src)
}
func (m *DeliverMessageReq) XXX_Size() int {
	return xxx_messageInfo_DeliverMessageReq.Size(m)
}
func (m *DeliverMessageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliverMessageReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeliverMessageReq proto.InternalMessageInfo

type DeliverMessageResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeliverMessageResp) Reset()         { *m = DeliverMessageResp{} }
func (m *DeliverMessageResp) String() string { return proto.CompactTextString(m) }
func (*DeliverMessageResp) ProtoMessage()    {}
func (*DeliverMessageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a9acacddce0399c, []int{1}
}

func (m *DeliverMessageResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeliverMessageResp.Unmarshal(m, b)
}
func (m *DeliverMessageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeliverMessageResp.Marshal(b, m, deterministic)
}
func (m *DeliverMessageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeliverMessageResp.Merge(m, src)
}
func (m *DeliverMessageResp) XXX_Size() int {
	return xxx_messageInfo_DeliverMessageResp.Size(m)
}
func (m *DeliverMessageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeliverMessageResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeliverMessageResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DeliverMessageReq)(nil), "pb.ws_conn.DeliverMessageReq")
	proto.RegisterType((*DeliverMessageResp)(nil), "pb.ws_conn.DeliverMessageResp")
}

func init() { proto.RegisterFile("ws_conn.proto", fileDescriptor_5a9acacddce0399c) }

var fileDescriptor_5a9acacddce0399c = []byte{
	// 111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2f, 0x8e, 0x4f,
	0xce, 0xcf, 0xcb, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2a, 0x48, 0xd2, 0x83, 0x8a,
	0x28, 0x09, 0x73, 0x09, 0xba, 0xa4, 0xe6, 0x64, 0x96, 0xa5, 0x16, 0xf9, 0xa6, 0x16, 0x17, 0x27,
	0xa6, 0xa7, 0x06, 0xa5, 0x16, 0x2a, 0x89, 0x70, 0x09, 0xa1, 0x0b, 0x16, 0x17, 0x18, 0x45, 0x72,
	0xb1, 0x85, 0x17, 0x3b, 0xe7, 0xe7, 0xe5, 0x09, 0xf9, 0x73, 0xf1, 0xa1, 0xca, 0x0b, 0xc9, 0xea,
	0x21, 0xcc, 0xd4, 0xc3, 0x30, 0x50, 0x4a, 0x0e, 0x9f, 0x74, 0x71, 0x41, 0x12, 0x1b, 0xd8, 0x61,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x71, 0x4f, 0xf9, 0xa9, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WsConnClient is the client API for WsConn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WsConnClient interface {
	// 投递消息
	DeliverMessage(ctx context.Context, in *DeliverMessageReq, opts ...grpc.CallOption) (*DeliverMessageResp, error)
}

type wsConnClient struct {
	cc *grpc.ClientConn
}

func NewWsConnClient(cc *grpc.ClientConn) WsConnClient {
	return &wsConnClient{cc}
}

func (c *wsConnClient) DeliverMessage(ctx context.Context, in *DeliverMessageReq, opts ...grpc.CallOption) (*DeliverMessageResp, error) {
	out := new(DeliverMessageResp)
	err := c.cc.Invoke(ctx, "/pb.ws_conn.WsConn/DeliverMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WsConnServer is the server API for WsConn service.
type WsConnServer interface {
	// 投递消息
	DeliverMessage(context.Context, *DeliverMessageReq) (*DeliverMessageResp, error)
}

// UnimplementedWsConnServer can be embedded to have forward compatible implementations.
type UnimplementedWsConnServer struct {
}

func (*UnimplementedWsConnServer) DeliverMessage(ctx context.Context, req *DeliverMessageReq) (*DeliverMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverMessage not implemented")
}

func RegisterWsConnServer(s *grpc.Server, srv WsConnServer) {
	s.RegisterService(&_WsConn_serviceDesc, srv)
}

func _WsConn_DeliverMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WsConnServer).DeliverMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ws_conn.WsConn/DeliverMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WsConnServer).DeliverMessage(ctx, req.(*DeliverMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WsConn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ws_conn.WsConn",
	HandlerType: (*WsConnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliverMessage",
			Handler:    _WsConn_DeliverMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ws_conn.proto",
}
